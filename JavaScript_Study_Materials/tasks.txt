1.1 An Introduction -- No Tasks
1.2 Code Editors -- No Tasks
1.3 Developer Console -- No Tasks

JS Fundamentals:
2.1 Hello, world!
Show an alert. Create a page that shows a message “I’m JavaScript!”.
	
	<script>
		alert( "I’m JavaScript!" );
	</script>

Take the solution of the previous task Show an alert. Modify it by extracting the script content into an external file alert.js, residing in the same folder.

	Html file
	<script src="test.js"></script>

	JS file
	alert( "I’m JavaScript!" );

2.2 Code Structure -- No Tasks
2.3 The Modern Mode -- No Tasks
2.4 Variables

	1) 
		a) Declare two variables: admin and name.
			let admin;
			let name; 

		b) Assign the value "John" to name.
			let name = "John";

		c) Copy the value from name to admin.
			let name = "John";
			let admin = name;

		d) Show the value of admin using alert (must output “John”).
			<script>
				let admin = "John";
				alert(admin);
			</script>

	2) Giving the right name
			a) Create the variable with the name of our planet. How would you name such a variable?
				let ourPlanetName = "Earth";

			b) Create the variable to store the name of the current visitor. How would you name that variable?
				let currentUserName= "Joe";

	3)	Uppercase const?
			a) Examine the following code:

				const birthday = '18.04.1982';

				const age = someCode(birthday);

				Here we have a constant birthday date and the age is calculated from birthday with the help of some code (it is not provided for shortness, and because details don’t matter here).

				Would it be right to use upper case for birthday? For age? Or even for both?

				const BIRTHDAY = '18.04.1982'; // make uppercase?

				const AGE = someCode(BIRTHDAY); // make uppercase?

					ANSWER: We generally use upper case for constants that are “hard-coded”. Or, in other words, when the value is known prior to execution and directly written into the code.

					In this code, birthday is exactly like that. So we could use the upper case for it.

					In contrast, age is evaluated in run-time. Today we have one age, a year after we’ll have another one. It is constant in a sense that it does not change through the code execution. But it is a bit “less of a constant” than birthday, it is calculated, so we should keep the lower case for it.


2.5 Data Types
	1) String quotes
		What is the output of the script?

		let name = "Ilya";

		alert( `hello ${1}` ); // ?

		alert( `hello ${"name"}` ); // ?

		alert( `hello ${name}` ); // ?

			ANSWER:
				hello 1
				hello name
				hello Ilya

2.6 Type Conversions
	1)Type conversions
		What are results of these expressions?

		"" + 1 + 0
			"" + "1" + "0"
			0 + "1" + "0"
			"10"

		"" - 1 + 0
			0 - 1 + 0
			-1

		true + false
			1 + 0
			1

		6 / "3"
			2

		"2" * "3"
			6

		4 + 5 + "px"
			"9px"

		"$" + 4 + 5
			"$" + "4" + "5"
			"$45"

		"4" - 2
			"4" - "2"
			2

		"4px" - 2
			"4px"-"2"
			NaN

		7 / 0
			Infinity

		"  -9\n" + 5
			"-9\n" + "5"
			"-9\n5"

		"  -9\n" - 5
			"-9\n" - "5"
			# the \n acts as a new line
			-9 - 5
			-14

		null + 1
			0 + 1
			1

		undefined + 1
			NaN + 1
			NaN

2.7 Operators
	1)The postfix and prefix forms
		What are the final values of all variables a, b, c and d after the code below?

		let a = 1, b = 1;

		let c = ++a; // ?
		let d = b++; // ?

			ANSWER:
				a = 2
				b = 2
				c = 2
				d = 1

				let a = 1, b = 1;

				alert( ++a ); // 2, prefix form returns the new value
				alert( b++ ); // 1, postfix form returns the old value

				alert( a ); // 2, incremented once
				alert( b ); // 2, incremented once

	2) Assignment result
		What are the values of a and x after the code below?

		let a = 2;

		let x = 1 + (a *= 2);

			ANSWER:
			x = 1 + (2 *= 2);
			x = 1 + (4)
			x = 5

2.8 Comparison
	1)Comparisons
		What will be the result for expressions?

		5 > 4
			true

		"apple" > "pineapple"
			false
			Dictionary comparison, hence false.

		"2" > "12"
			true
			Again, dictionary comparison, first char of "2" is greater than the first char of "1".

		undefined == null
			true
			Values null and undefined equal each other only.

		undefined === null
			false
			Strict equality is strict. Different types from both sides lead to false.

		null == "\n0\n"
			null == NaN
			false
			Values null and undefined equal each other only.

		null === +"\n0\n"
			false
			Strict equality of different types.

2.9 Interaction: alert, prompt, confirm 
	1) Create a web-page that asks for a name and outputs it.

2.10 Conditional operators: if, '?'
	1) if (a string with zero)
		Will alert be shown?

		if ("0") {
		  alert( 'Hello' );
		}
			ANSWER: yes b/c "0" is true

	2) The name of JavaScript
		Using the if..else construct, write the code which asks: ‘What is the “official” name of JavaScript?’

		If the visitor enters “ECMAScript”, then output “Right!”, otherwise – output: “Didn’t know? ECMAScript!”

	3) Show the sign
		Using if..else, write the code which gets a number via prompt and then shows in alert:

		1, if the value is greater than zero,
		-1, if less than zero,
		0, if equals zero.
		In this task we assume that the input is always a number.

	4) Check the login
		Write the code which asks for a login with prompt.

		If the visitor enters "Admin", then prompt for a password, if the input is an empty line or Esc – show “Canceled.”, if it’s another string – then show “I don’t know you”.

		The password is checked as follows:

		If it equals “TheMaster”, then show “Welcome!”,
		Another string – show “Wrong password”,
		For an empty string or cancelled input, show “Canceled.”

	5) Rewrite 'if' into '?'
		Rewrite this if using the ternary operator '?':

		if (a + b < 4) {
		  result = 'Below';
		} else {
		  result = 'Over';
		}

			ANSWER:
				result = (a + b < 4) ? 'Below.' : 'Over';

	6) Rewrite 'if..else' into '?'
		Rewrite if..else using multiple ternary operators '?'.

		For readability, it’s recommended to split the code into multiple lines.

		let message;

		if (login == 'Employee') {
		  message = 'Hello';
		} else if (login == 'Director') {
		  message = 'Greetings';
		} else if (login == '') {
		  message = 'No login';
		} else {
		  message = '';
		}

			ANSWER:
				let message = (login == 'Employee') ? 'Hello' :
					(login == 'Director') ? 'Greetings' :
					(login == '') ? 'No login' :
					'';

2.11 Logical Operators
	1) What's the result of OR?
		What the code below is going to output?

		alert( null || 2 || undefined );

			ANSWER: 2

	2) What's the result of OR'ed alerts?
		What the code below will output?

		alert( alert(1) || 2 || alert(3) );

			ANSWER: first 1, then 2.

			The call to alert does not return a value. Or, in other words, it returns undefined.

			The first OR || evaluates it’s left operand alert(1). That shows the first message with 1.
			The alert returns undefined, so OR goes on to the second operand searching for a truthy value.
			The second operand 2 is truthy, so the execution is halted, 2 is returned and then shown by the outer alert.
			There will be no 3, because the evaluation does not reach alert(3).

	3) What is the result of AND?
		What this code is going to show?

		alert( 1 && null && 2 );

			ANSWER: null

	4) What is the result of AND'ed alerts?
		What will this code show?

		alert( alert(1) && alert(2) );

			ANSWER: 1, and then undefined.

			The call to alert returns undefined (it just shows a message, so there’s no meaningful return).

			Because of that, && evaluates the left operand (outputs 1), and immediately stops, because undefined is a falsy value. And && looks for a falsy value and returns it, so it’s done.

	5) The result of OR AND OR
		What will be the result?

		alert( null || 2 && 3 || 4 );

			ANSWER:
				alert(null || 3 || 4) // 2 && 3 has no falsey, so 3 

				alert(3||4)
				3 // first truthy value

	6) Check the range between
		Write an “if” condition to check that age is between 14 and 90 inclusively.

		“Inclusively” means that age can reach the edges 14 or 90.

			ANSWER:

				if (14 <= age && age <= 90)

	7) A question about "if"
		Which of these alerts are going to execute?

		What will be the results of the expressions inside if(...)?

		a) if (-1 || 0) alert( 'first' );
		b) if (-1 && 0) alert( 'second' );
		c) if (null || -1 && 1) alert( 'third' );

			ANSWER:
			// a) Runs.
			// The result of -1 || 0 = -1, truthy
			if (-1 || 0) alert( 'first' );

			// b) Doesn't run
			// -1 && 0 = 0, falsy
			if (-1 && 0) alert( 'second' );

			// c) Executes
			// Operator && has a higher precedence than ||
			// so -1 && 1 executes first, giving us the chain:
			// null || -1 && 1  ->  null || 1  ->  1
			if (null || -1 && 1) alert( 'third' );

2.12 Loops: while and for

	1) Last loop value
		What is the last value alerted by this code? Why?

		let i = 3;

		while (i) {
		  alert( i-- );
		}

			ANSWER:
				1. Every loop iteration decreases i by 1. The check while(i) stops the loop when i = 0.

	2) Which values shows the while?
		For every loop, write down which values it shows, in your opinion. And then compare with the answer.

		Both loops alert same values or not?

		a) The prefix form ++i:

			let i = 0;
			while (++i < 5) alert( i );

			ANSWER:
				alerts 1 - 4
				The first value is i=1, because ++i first increments i and then returns the new value. So the first comparison is 1 < 5 and the alert shows 1.

				Then follow 2,3,4… – the values show up one after another. The comparison always uses the incremented value, because ++ is before the variable.

				Finally, i=4 is incremented to 5, the comparison while(5 < 5) fails, and the loop stops. So 5 is not shown.

		b) The postfix form i++

			let i = 0;
			while (i++ < 5) alert( i );

			ANSWER:
				alerts 1 - 5
				The first value is again i=1. The postfix form of i++ increments i and then returns the old value, so the comparison i++ < 5 will use i=0 (contrary to ++i < 5).

				But the alert call is separate. It’s another statement which executes after the increment and the comparison. So it gets the current i=1.

				Then follow 2,3,4…

				Let’s stop on i=4. The prefix form ++i would increment it and use 5 in the comparison. But here we have the postfix form i++. So it increments i to 5, but returns the old value. Hence the comparison is actually while(4 < 5) – true, and the control goes on to alert.

				The value i=5 is the last one, because on the next step while(5 < 5) is false.

	3) Which values get shown by the "for" loop?
		
		For each loop write down which values it is going to show. Then compare with the answer.

		Both loops alert same values or not?

		a) The postfix form:

			for (let i = 0; i < 5; i++) alert( i );

			ANSWER: 0 - 4


		b) The prefix form:

			for (let i = 0; i < 5; ++i) alert( i );

			ANSWER: 0 - 4
				That can be easily deducted from the algorithm of for:

				Execute once i = 0 before everything (begin).
				Check the condition i < 5
				If true – execute the loop body alert(i), and then i++
				The increment i++ is separated from the condition check (2). That’s just another statement.

				The value returned by the increment is not used here, so there’s no difference between i++ and ++i.

	4)	Output even numbers in the loop
			Use the for loop to output even numbers from 2 to 10.

				ANSWER:

					for (let i = 2; i <=10; i++) {
						if (i % 2 == 0) {
							alert(i);
						}
					}

	5) Replace "for" with "while"
			Rewrite the code changing the for loop to while without altering its behavior (the output should stay same).

			 for (let i = 0; i < 3; i++) {
			  alert( `number ${i}!` );
			}

			ANSWER:
				let i = 0
				while (i < 3) {
					alert('number ${i}!');
					i++;
				}

	6) Repeat until the input is correct
			Write a loop which prompts for a number greater than 100. If the visitor enters another number – ask him to input again.

			The loop must ask for a number until either the visitor enters a number greater than 100 or cancels the input/enters an empty line.

			Here we can assume that the visitor only inputs numbers. There’s no need to implement a special handling for a non-numeric input in this task.

				ANSWER:
					let num;

					do {
					  num = prompt("Enter a number greater than 100?", 0);
					} while (num <= 100 && num);

					The loop do..while repeats while both checks are truthy:

					The check for num <= 100 – that is, the entered value is still not greater than 100.
					The check && num is false when num is null or a empty string. Then the while loop stops too.
					P.S. If num is null then num <= 100 is true, so without the 2nd check the loop wouldn’t stop if the user clicks CANCEL. Both checks are required.

	7) Output prime numbers
			An integer number greater than 1 is called a prime if it cannot be divided without a remainder by anything except 1 and itself.

			In other words, n > 1 is a prime if it can’t be evenly divided by anything except 1 and n.

			For example, 5 is a prime, because it cannot be divided without a remainder by 2, 3 and 4.

			Write the code which outputs prime numbers in the interval from 2 to n.

			For n = 10 the result will be 2,3,5,7.

			P.S. The code should work for any n, not be hard-tuned for any fixed value.

			ANSWER: 

				let n = 10;

				nextPrime:
				for (let i = 2; i <= n; i++) { // for each i...

				  for (let j = 2; j < i; j++) { // look for a divisor..
				    if (i % j == 0) continue nextPrime; // not a prime, go next i
				  }

				  alert( i ); // a prime
				}


SKIPPED 2.13-2.14 Tasks

2.15 Function Expressions and Arrows






























